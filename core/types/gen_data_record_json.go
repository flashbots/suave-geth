// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*dataRecordMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (d DataRecord) MarshalJSON() ([]byte, error) {
	type DataRecord struct {
		Id                  DataId
		Salt                DataId
		DecryptionCondition hexutil.Uint64
		AllowedPeekers      []common.Address
		AllowedStores       []common.Address
		Version             string
	}
	var enc DataRecord
	enc.Id = d.Id
	enc.Salt = d.Salt
	enc.DecryptionCondition = hexutil.Uint64(d.DecryptionCondition)
	enc.AllowedPeekers = d.AllowedPeekers
	enc.AllowedStores = d.AllowedStores
	enc.Version = d.Version
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (d *DataRecord) UnmarshalJSON(input []byte) error {
	type DataRecord struct {
		Id                  *DataId
		Salt                *DataId
		DecryptionCondition *hexutil.Uint64
		AllowedPeekers      []common.Address
		AllowedStores       []common.Address
		Version             *string
	}
	var dec DataRecord
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Id != nil {
		d.Id = *dec.Id
	}
	if dec.Salt != nil {
		d.Salt = *dec.Salt
	}
	if dec.DecryptionCondition != nil {
		d.DecryptionCondition = uint64(*dec.DecryptionCondition)
	}
	if dec.AllowedPeekers != nil {
		d.AllowedPeekers = dec.AllowedPeekers
	}
	if dec.AllowedStores != nil {
		d.AllowedStores = dec.AllowedStores
	}
	if dec.Version != nil {
		d.Version = *dec.Version
	}
	return nil
}
