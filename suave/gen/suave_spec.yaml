types:
  - name: DataId
    type: bytes16
enums:
  - name: CryptoSignature
    values: ["SECP256", "BLS"]
structs:
  - name: DataRecord
    description: "A record of data stored in the ConfidentialStore."
    fields:
      - name: id
        description: "ID of the data record"
        type: DataId
      - name: salt
        description: "Salt used to derive the encryption key"
        type: DataId
      - name: decryptionCondition
        description: "Up to which block this data record is valid"
        type: uint64
      - name: allowedPeekers
        description: "Addresses which can get data"
        type: address[]
      - name: allowedStores
        description: "Addresses can set data"
        type: address[]
      - name: version
        description: "Namespace of the data record"
        type: string
  - name: Withdrawal
    description: "A withdrawal from the beacon chain."
    fields:
      - name: index
        description: "Index of the withdrawal"
        type: uint64
      - name: validator
        description: "ID of the validator"
        type: uint64
      - name: Address
        description: "Address to withdraw to"
        type: address
      - name: amount
        description: "Amount to be withdrawn"
        type: uint64
  - name: BuildBlockArgs
    description: "Arguments to build the block."
    fields:
      - name: slot
        description: "Slot number of the block"
        type: uint64
      - name: proposerPubkey
        description: "Public key of the proposer"
        type: bytes
      - name: parent
        description: "Hash of the parent block"
        type: bytes32
      - name: timestamp
        description: "Timestamp of the block"
        type: uint64
      - name: feeRecipient
        description: "Address of the fee recipient"
        type: address
      - name: gasLimit
        description: "Gas limit of the block"
        type: uint64
      - name: random
        description: "Randomness of the block"
        type: bytes32
      - name: withdrawals
        description: "List of withdrawals"
        type: Withdrawal[]
      - name: extra
        description: "Extra data of the block"
        type: bytes
      - name: beaconRoot
        description: "Root of the beacon chain"
        type: bytes32
      - name: fillPending
        description: "Whether to fill the block with pending transactions"
        type: bool
  - name: HttpRequest
    description: "Description of an HTTP request."
    fields:
      - name: url
        description: "Target url of the request"
        type: string
      - name: method
        description: "HTTP method of the request"
        type: string
      - name: headers
        description: "HTTP Headers"
        type: string[]
      - name: body
        description: "Body of the request (if Post or Put)"
        type: bytes
      - name: withFlashbotsSignature
        description: "Whether to include the Flashbots signature"
        type: bool
      - name: timeout
        description: "Timeout of the request in milliseconds"
        type: uint64
  - name: SimulateTransactionResult
    description: "Result of a simulated transaction."
    fields:
      - name: egp
        description: "Effective Gas Price of the transaction"
        type: uint64
      - name: logs
        description: "Logs emitted during the simulation"
        type: SimulatedLog[]
      - name: success
        description: "Whether the transaction was successful or not"
        type: bool
      - name: error
        description: "Error message if any"
        type: string
  - name: SimulatedLog
    description: "A log emitted during the simulation of a transaction."
    fields:
      - name: data
        description: "Data of the log"
        type: bytes
      - name: addr
        description: "Address of the contract that emitted the log"
        type: address
      - name: topics
        description: "Topics of the log"
        type: bytes32[]
functions:
  - name: confidentialInputs
    address: "0x0000000000000000000000000000000042010001"
    description: "Provides the confidential inputs associated with a confidential computation request. Outputs are in bytes format."
    output:
      packed: true
      fields:
        - name: confindentialData
          type: bytes
          description: "Confidential inputs"
  - name: newDataRecord
    address: "0x0000000000000000000000000000000042030000"
    description: "Initializes data records within the ConfidentialStore. Prior to storing data, all data records should undergo initialization via this precompile."
    input:
      - name: decryptionCondition
        type: uint64
        description: "Up to which block this data record is valid. Used during `fillMevShareBundle` precompie."
      - name: allowedPeekers
        type: address[]
        description: "Addresses which can get data"
      - name: allowedStores
        type: address[]
        description: "Addresses can set data"
      - name: dataType
        type: string
        description: "Namespace of the data"
    output:
      fields:
        - name: dataRecord
          type: DataRecord
          description: "Data record that was created"
  - name: fetchDataRecords
    address: "0x0000000000000000000000000000000042030001"
    description: "Retrieves all data records correlating with a specified decryption condition and namespace"
    input:
      - name: cond
        type: uint64
        description: "Filter for the decryption condition"
      - name: namespace
        type: string
        description: "Filter for the namespace of the data records"
    output:
      fields:
        - name: dataRecords
          type: DataRecord[]
          description: "List of data records that match the filter"
  - name: confidentialStore
    address: "0x0000000000000000000000000000000042020000"
    description: "Stores data in the confidential store. Requires the caller to be part of the `AllowedPeekers` for the associated data record."
    input:
      - name: dataId
        type: DataId
        description: "ID of the data record to store"
      - name: key
        type: string
        description: "Key slot of the data to store"
      - name: value
        type: bytes
        description: "Value of the data to store"
  - name: confidentialRetrieve
    address: "0x0000000000000000000000000000000042020001"
    description: "Retrieves data from the confidential store. Also mandates the caller's presence in the `AllowedPeekers` list."
    input:
      - name: dataId
        type: DataId
        description: "ID of the data record to retrieve"
      - name: key
        type: string
        description: "Key slot of the data to retrieve"
    output:
      packed: true
      fields:
        - name: value
          type: bytes
          description: "Value of the data"
  - name: signEthTransaction
    address: "0x0000000000000000000000000000000040100001"
    description: "Signs an Ethereum Transaction, 1559 or Legacy, and returns raw signed transaction bytes. `txn` is binary encoding of the transaction."
    input:
      - name: txn
        type: bytes
        description: "Transaction to sign (RLP encoded)"
      - name: chainId
        type: string
        description: "Id of the chain to sign for (hex encoded, with 0x prefix)"
      - name: signingKey
        type: string
        description: "Hex encoded string of the ECDSA private key (without 0x prefix)"
    output:
      fields:
        - name: signedTxn
          type: bytes
          description: "Signed transaction encoded in RLP"
  - name: simulateBundle
    address: "0x0000000000000000000000000000000042100000"
    description: "Performs a simulation of the bundle by building a block that includes it."
    input:
      - name: bundleData
        type: bytes
        description: "Bundle encoded in JSON"
    output:
      fields:
        - name: effectiveGasPrice
          type: uint64
          description: "Effective Gas Price of the resultant block"
  - name: extractHint
    address: "0x0000000000000000000000000000000042100037"
    description: "Interprets the bundle data and extracts hints, such as the `To` address and calldata."
    isConfidential: true
    input:
      - name: bundleData
        type: bytes
        description: "Bundle object encoded in JSON"
    output:
      packed: true
      fields:
        - name: hints
          type: bytes
          description: "List of hints encoded in JSON"
  - name: buildEthBlock
    address: "0x0000000000000000000000000000000042100001"
    description: "Constructs an Ethereum block based on the provided data records. No blobs are returned."
    input:
      - name: blockArgs
        type: BuildBlockArgs
        description: "Arguments to build the block"
      - name: dataId
        type: DataId
        description: "ID of the data record with mev-share bundle data"
      - name: relayUrl
        type: string
        description: "If specified the built block will be submitted to the relay"
    output:
      fields:
        - name: blockBid
          type: bytes
          description: "Block Bid encoded in JSON"
        - name: executionPayload
          type: bytes
          description: "Execution payload encoded in JSON"
  - name: buildEthBlockTo
    address: "0x0000000000000000000000000000000042100006"
    description: "Constructs an Ethereum block based on the provided data records. No blobs are returned."
    input:
      - name: executionNodeURL
        type: string
        description: "URL (or service name) of the execution node"
      - name: blockArgs
        type: BuildBlockArgs
        description: "Arguments to build the block"
      - name: dataId
        type: DataId
        description: "ID of the data record with mev-share bundle data"
      - name: relayUrl
        type: string
        description: "If specified the built block will be submitted to the relay"
    output:
      fields:
        - name: blockBid
          type: bytes
          description: "Block Bid encoded in JSON"
        - name: executionPayload
          type: bytes
          description: "Execution payload encoded in JSON"
  - name: submitEthBlockToRelay
    address: "0x0000000000000000000000000000000042100002"
    description: "Submits a given builderBid to a mev-boost relay."
    isConfidential: true
    input:
      - name: relayUrl
        type: string
        description: "URL of the relay to submit to"
      - name: builderBid
        type: bytes
        description: "Block bid to submit encoded in JSON"
    output:
      packed: true
      fields:
        - name: blockBid
          type: bytes
          description: "Error message if any"
  - name: ethcall
    address: "0x0000000000000000000000000000000042100003"
    description: "Uses the `eth_call` JSON RPC method to let you simulate a function call and return the response."
    input:
      - name: contractAddr
        type: address
        description: "Address of the contract to call"
      - name: input1
        type: bytes
        description: "Data to send to the contract"
    output:
      fields:
        - name: callOutput
          type: bytes
          description: "Output of the contract call"
  - name: submitBundleJsonRPC
    address: "0x0000000000000000000000000000000043000001"
    description: "Submits bytes as JSONRPC message to the specified URL with the specified method. As this call is intended for bundles, it also signs the params and adds `X-Flashbots-Signature` header, as usual with bundles. Regular eth bundles don't need any processing to be sent."
    isConfidential: true
    input:
      - name: url
        type: string
        description: "URL to send the request to"
      - name: method
        type: string
        description: "JSONRPC method to call"
      - name: params
        type: bytes
        description: "JSONRPC input params encoded in RLP"
    output:
      packed: true
      fields:
        - name: errorMessage
          type: bytes
          description: "Error message if any"
  - name: fillMevShareBundle
    address: "0x0000000000000000000000000000000043200001"
    isConfidential: true
    description: "Joins the user's transaction and with the backrun, and returns encoded mev-share bundle. The bundle is ready to be sent via `SubmitBundleJsonRPC`."
    input:
      - name: dataId
        type: DataId
        description: "ID of the data record with mev-share bundle data"
    output:
      packed: true
      fields:
        - name: encodedBundle
          type: bytes
          description: "Mev-Share bundle encoded in JSON"
  - name: signMessage
    address: "0x0000000000000000000000000000000040100003"
    description: "Signs a message and returns the signature."
    isConfidential: true
    input:
      - name: digest
        type: bytes
        description: "Message to sign"
      - name: crypto
        type: CryptoSignature
        description: "Type of the private key to generate"
      - name: signingKey
        type: string
        description: "Hex encoded string of the ECDSA private key"
    output:
      fields:
        - name: signature
          type: bytes
          description: "Signature of the message with the private key"
  - name: doHTTPRequest
    address: "0x0000000000000000000000000000000043200002"
    description: "Performs an HTTP request and returns the response. `request` is the request to perform."
    input:
      - name: request
        type: HttpRequest
        description: "Request to perform"
    output:
      fields:
        - name: httpResponse
          type: bytes
          description: "Body of the response"
  - name: newBuilder
    address: "0x0000000000000000000000000000000053200001"
    description: "Initializes a new remote builder session"
    output:
      fields:
        - name: sessionid
          type: string
          description: "ID of the remote builder session"
  - name: simulateTransaction
    address: "0x0000000000000000000000000000000053200002"
    description: "Simulates a transaction on a remote builder session"
    input:
      - name: sessionid
        type: string
        description: "ID of the remote builder session"
      - name: txn
        type: bytes
        description: "Txn to simulate encoded in RLP"
    output:
      fields:
        - name: simulationResult
          type: SimulateTransactionResult
          description: "Result of the simulation"
  - name: privateKeyGen
    address: "0x0000000000000000000000000000000053200003"
    description: "Generates a private key in ECDA secp256k1 format"
    input:
      - name: crypto
        type: CryptoSignature
        description: "Type of the private key to generate"
    output:
      fields:
        - name: privateKey
          type: string
          description: "Hex encoded string of the ECDSA private key. Exactly as a signMessage precompile wants."
  - name: contextGet
    address: "0x0000000000000000000000000000000053300003"
    description: "Retrieves a value from the context"
    input:
      - name: key
        type: string
        description: "Key of the value to retrieve"
    output:
      fields:
        - name: value
          type: bytes
          description: "Value of the key"
  - name: randomBytes
    address: "0x000000000000000000000000000000007770000b"
    description: "Generates a number of random bytes, given by the argument numBytes."
    input:
      - name: numBytes
        type: uint8
        description: "Number of random bytes to generate"
    output:
      fields:
        - name: value
          type: bytes
          description: "Randomly-generated bytes"
  - name: secp256k1Encrypt
    address: "0x000000000000000000000000000000005770000e"
    description: "Encrypts a message using the given secp256k1 public key"
    input:
      - name: message
        type: bytes
        description: "Message to encrypt"
      - name: publicKey
        type: bytes
        description: "Uncompressed pubkey used to encrypt the message: encoded as abi-packed hex-string with no 0x prefix. Example: `abi.encodePacked('04115c42e757b2efb7671c578530ec191a1359381e6a71127a9d37c486fd30dae57e76dc58f693bd7e7010358ce6b165e483a2921010db67ac11b1b51b651953d2')`"
    output:
      fields:
        - name: ciphertext
          type: bytes
          description: "Encrypted message"
  - name: secp256k1Decrypt
    address: "0x000000000000000000000000000000005770000d"
    description: "Decrypts a message using the given secp256k1 private key"
    input:
      - name: ciphertext
        type: bytes
        description: "Message to decrypt"
      - name: privateKey
        type: bytes32
        description: "Private key used to decrypt the message."
    output:
      fields:
        - name: message
          type: bytes
          description: "Decrypted message"
